model User {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String           @unique @map("email")
  password        String           @map("password")
  username        String           @map("username")
  avatarUrl       String?          @map("avatar_url")
  cidId           String?          @map("cid_id") @db.Uuid
  dateOfBirth     DateTime         @map("date_of_birth")
  firstName       String           @map("first_name")
  gender          Gender           @map("gender")
  isDeleted       Boolean?         @default(false) @map("is_deleted")
  isVerified      Boolean?         @default(false) @map("is_verified")
  lastName        String           @map("last_name")
  phoneNumber     String           @unique @map("phone_number")
  roleId          String           @map("role_id") @db.Uuid
  status          String?          @default("active") @map("status")
  createdAt       DateTime?        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?        @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt       DateTime?        @map("deleted_at") @db.Timestamptz(6)
  landLords       LandLord[]
  managers        Manager[]
  renters         Renter[]
  staffs          Staff[]
  technicalStaffs TechnicalStaff[]
  Cid             Cid?             @relation(fields: [cidId], references: [id], onDelete: Restrict)
  role            Role             @relation(fields: [roleId], references: [id])

  @@map("users")
}

enum Gender {
  MALE   @map("MALE")
  FEMALE @map("FEMALE")
  OTHER  @map("OTHER")
}
